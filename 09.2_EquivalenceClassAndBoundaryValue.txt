/* 
TESTS:
1. Создать набор тестов, использующий техники тест-дизайна: классы эквивалентности, граничных значений.
2. Ожидаемые классы: 
request age_europe: "age_class": "0-17", "18-50", "50-100".
request age_usa: "age_class": "0-20", "21-50", "50-100".
3. Проверка содержимого 'content'.

REQUEST:
Метод: POST
Body: "age: int"

RESPONSE:
"age": "1",
"age_type": "underage",
"content": [
        "Tom & Jerry (Feb. 26)",
        "Raya and the Last Dragon (Mar. 5)",
        "Peter Rabbit 2: The Runaway (April 2)",
        "Rumble (May 14)",
        "Minions: The Rise of Gru (July 2)",
        "Space Jam 2: A New Legacy (July 16)",
        "The Addams Family 2 (Oct. 8)",
        "Encanto (Nov. 24)"
]		

Решение:
В ходе дополнительных уточнений по заданию было выяснено, что пересечение двух классов на возрасте 50 можно трактовать произвольно, поэтому для теста были выбраны дипазоны 18-50, 51-100.
Так же стало известно, что ожидаемый результат работы системы за границами классов: сообщение об ошибке 500.
Таким образом разбиваем тест одного запроса на 4 группы: 
'0-17' (тестовые данные: 10, 0, 17), 
'18-50' (тестовые данные: 25, 18, 50), 
'51-100' (тестовые данные: 70, 51, 100), 
'Status 500' (тестовые данные: -1, 101, дроби, пробел, пустое значение, спецсимволы).
Для проверки содержимого в ключе ответа ‘content’ ожидаемые параметры:
Для класса ‘underage’:
Tom & Jerry (Feb. 26),Raya and the Last Dragon (Mar. 5),Peter Rabbit 2: The Runaway (April 2),Rumble (May 14),Minions: The Rise of Gru (July 2),Space Jam 2: A New Legacy (July 16),The Addams Family 2 (Oct. 8),Encanto (Nov. 24)
Для класса ‘adult’:
Tom & Jerry (Feb. 26),Raya and the Last Dragon (Mar. 5),Peter Rabbit 2: The Runaway (April 2),Rumble (May 14),Minions: The Rise of Gru (July 2),Space Jam 2: A New Legacy (July 16),The Addams Family 2 (Oct. 8),Encanto (Nov. 24),The Matrix 4 (2021),Ghostbusters: Afterlife (2021),Chaos Walking (2021),Eternals (2021),Godzilla vs. Kong (2021),The Tomorrow War (2021),Venom: Let There Be Carnage (2021),Black Widow (2021),Dune (2021)
Для класса ‘antiquity’:
An American Pickle,The Lovebirds,Bill & Ted Face The Music,The Personal History Of David Copperfield,Emma,Happiest Season,Spontaneous,Palm Springs
*/

// request age_europe:
// Проверка класса эквивалентности 0-17
// Введите в массив через запятую тестовые данные
// (Вводим значение из класс, а так же краиние значения класса. Крайние значения соседнего класса проверяются в других тестах).

let arr = [10, '0', 17];

let index;
for (index = 0; index < arr.length; ++index) {
    let testData = arr[index];
    pm.sendRequest({
        url: 'http://116.203.27.46:5002/age_europe',
        method: 'POST',
        headers: {},
        body: {
            mode: 'formdata',
            formdata: [
                {key: 'age', value: arr[index]}
            ] 
        }   
    }, function(err, res) {
        console.log('Age value: ' + testData);
        //console.log(res);
        //console.log(Object.values(res));
        let statusCode = Object.values(res)[3];
            
            if (statusCode === 200) {
                let resType = res.json();
                pm.test('Age value: ' + testData, function () {
                pm.expect(resType.age_type).to.include('underage');
                });
                pm.environment.set('content', resType.content);
                pm.test('Content with : ' + testData, function () {
                    pm.expect(pm.environment.get('underageContent')).to.include(pm.environment.get('content'));
                });
                
            } else {
                pm.test('Age value: ' + testData, function () {
                pm.expect(res).to.have.property('code', 200);   
                });
                pm.environment.set('content', null);
                pm.test('Content with : ' + testData, function () {
                pm.expect(pm.environment.get('underageContent')).to.include(pm.environment.get('content'));
                });
            };  
        });
}

// request age_europe:
// Проверка класса эквивалентности 18-50
// Введите в массив через запятую тестовые данные
// (Вводим значение из класс, а так же краиние значения класса. Крайние значения соседнего класса проверяются в других тестах).

let arr = [25, 18, 50];

let index;
for (index = 0; index < arr.length; ++index) {
    let testData = arr[index];
    pm.sendRequest({
        url: 'http://116.203.27.46:5002/age_europe',
        method: 'POST',
        headers: {},
        body: {
            mode: 'formdata',
            formdata: [
                {key: 'age', value: arr[index]}
            ] 
        }   
    }, function(err, res) {
        console.log('Age value: ' + testData);
        let statusCode = Object.values(res)[3];
            
            if (statusCode === 200) {
                let resType = res.json();
                pm.test('Age value: ' + testData, function () {
                pm.expect(resType.age_type).to.include('adult');
                });
                pm.environment.set('content', resType.content);
                pm.test('Content with : ' + testData, function () {
                    pm.expect(pm.environment.get('adultContent')).to.include(pm.environment.get('content'));
                });
                
            } else {
                pm.test('Age value: ' + testData, function () {
                pm.expect(res).to.have.property('code', 200);   
                });
                pm.environment.set('content', null);
                pm.test('Content with : ' + testData, function () {
                pm.expect(pm.environment.get('adultContent')).to.include(pm.environment.get('content'));
                });
            };  
        });
}

// request age_europe:
// Проверка класса эквивалентности 51-100
// Введите в массив через запятую тестовые данные
// (Вводим значение из класс, а так же краиние значения класса. Крайние значения соседнего класса проверяются в других тестах).

let arr = [70, 51, 100];

let index;
for (index = 0; index < arr.length; ++index) {
    let testData = arr[index];
    pm.sendRequest({
        url: 'http://116.203.27.46:5002/age_europe',
        method: 'POST',
        headers: {},
        body: {
            mode: 'formdata',
            formdata: [
                {key: 'age', value: arr[index]}
            ] 
        }   
    }, function(err, res) {
        console.log('Age value: ' + testData);
        let statusCode = Object.values(res)[3];
            
            if (statusCode === 200) {
                let resType = res.json();
                pm.test('Age value: ' + testData, function () {
                pm.expect(resType.age_type).to.include('antiquity');
                });
                pm.environment.set('content', resType.content);
                pm.test('Content with : ' + testData, function () {
                    pm.expect(pm.environment.get('antiquityContent')).to.include(pm.environment.get('content'));
                });
                
            } else {
                pm.test('Age value: ' + testData, function () {
                pm.expect(res).to.have.property('code', 200);   
                });
                pm.environment.set('content', null);
                pm.test('Content with : ' + testData, function () {
                pm.expect(pm.environment.get('antiquityContent')).to.include(pm.environment.get('content'));
                });
            };  
        });
}

// request age_europe:
// Проверка на Status 500
// Введите в массив через запятую тестовые данные
// (Вводим все, что должно вызвать Status 500)

let arr = ['', ' ', -1, 101, 1000, -1000, 0.5, '0,5', 'abc', '.', '/', '?', ':', '-', '+', '=', '#', '$', '%', '&', ',', '?', '@', '"', ';', '*'];

let index;
for (index = 0; index < arr.length; ++index) {
    let testData = arr[index];
    pm.sendRequest({
        url: 'http://116.203.27.46:5002/age_europe',
        method: 'POST',
        headers: {},
        body: {
            mode: 'formdata',
            formdata: [
                {key: 'age', value: arr[index]}
            ] 
        }   
    }, function(err, res) {
        console.log('Age value: ' + testData);
        pm.test('Age value: ' + testData, function () {
            pm.expect(res).to.have.property('code', 500);
        });
    });
}

// request age_usa:
// Проверка класса эквивалентности 0-20
// Введите в массив через запятую тестовые данные
// (Вводим значение из класс, а так же краиние значения класса. Крайние значения соседнего класса проверяются в других тестах).

let arr = [10, '0', 20];

let index;
for (index = 0; index < arr.length; ++index) {
    let testData = arr[index];
    pm.sendRequest({
        url: 'http://116.203.27.46:5002/age_usa',
        method: 'POST',
        headers: {},
        body: {
            mode: 'formdata',
            formdata: [
                {key: 'age', value: arr[index]}
            ] 
        }   
    }, function(err, res) {
        console.log('Age value: ' + testData);
        //console.log(res);
        //console.log(Object.values(res));
        let statusCode = Object.values(res)[3];
            
            if (statusCode === 200) {
                let resType = res.json();
                pm.test('Age value: ' + testData, function () {
                pm.expect(resType.age_type).to.include('underage');
                });
                pm.environment.set('content', resType.content);
                pm.test('Content with : ' + testData, function () {
                    pm.expect(pm.environment.get('underageContent')).to.include(pm.environment.get('content'));
                });
                
            } else {
                pm.test('Age value: ' + testData, function () {
                pm.expect(res).to.have.property('code', 200);   
                });
                pm.environment.set('content', null);
                pm.test('Content with : ' + testData, function () {
                pm.expect(pm.environment.get('underageContent')).to.include(pm.environment.get('content'));
                });
            };  
        });
}

// request age_usa:
// Проверка класса эквивалентности 21-50
// Введите в массив через запятую тестовые данные
// (Вводим значение из класс, а так же краиние значения класса. Крайние значения соседнего класса проверяются в других тестах).

let arr = [25, 21, 50, 22, 49];

let index;
for (index = 0; index < arr.length; ++index) {
    let testData = arr[index];
    pm.sendRequest({
        url: 'http://116.203.27.46:5002/age_usa',
        method: 'POST',
        headers: {},
        body: {
            mode: 'formdata',
            formdata: [
                {key: 'age', value: arr[index]}
            ] 
        }   
    }, function(err, res) {
        console.log('Age value: ' + testData);
        let statusCode = Object.values(res)[3];
            
            if (statusCode === 200) {
                let resType = res.json();
                pm.test('Age value: ' + testData, function () {
                pm.expect(resType.age_type).to.include('adult');
                });
                pm.environment.set('content', resType.content);
                pm.test('Content with : ' + testData, function () {
                    pm.expect(pm.environment.get('adultContent')).to.include(pm.environment.get('content'));
                });
                
            } else {
                pm.test('Age value: ' + testData, function () {
                pm.expect(res).to.have.property('code', 200);   
                });
                pm.environment.set('content', null);
                pm.test('Content with : ' + testData, function () {
                pm.expect(pm.environment.get('adultContent')).to.include(pm.environment.get('content'));
                });
            };  
        });
}

// request age_usa:
// Проверка класса эквивалентности 51-100
// Введите в массив через запятую тестовые данные
// (Вводим значение из класс, а так же краиние значения класса. Крайние значения соседнего класса проверяются в других тестах).

let arr = [70, 51, 100];

let index;
for (index = 0; index < arr.length; ++index) {
    let testData = arr[index];
    pm.sendRequest({
        url: 'http://116.203.27.46:5002/age_usa',
        method: 'POST',
        headers: {},
        body: {
            mode: 'formdata',
            formdata: [
                {key: 'age', value: arr[index]}
            ] 
        }   
    }, function(err, res) {
        console.log('Age value: ' + testData);
        let statusCode = Object.values(res)[3];
            
            if (statusCode === 200) {
                let resType = res.json();
                pm.test('Age value: ' + testData, function () {
                pm.expect(resType.age_type).to.include('antiquity');
                });
                pm.environment.set('content', resType.content);
                pm.test('Content with : ' + testData, function () {
                    pm.expect(pm.environment.get('antiquityContent')).to.include(pm.environment.get('content'));
                });
                
            } else {
                pm.test('Age value: ' + testData, function () {
                pm.expect(res).to.have.property('code', 200);   
                });
                pm.environment.set('content', null);
                pm.test('Content with : ' + testData, function () {
                pm.expect(pm.environment.get('antiquityContent')).to.include(pm.environment.get('content'));
                });
            };  
        });
}

// request age_usa:
// Проверка на Status 500
// Введите в массив через запятую тестовые данные
// (Вводим все, что должно вызвать Status 500)

let arr = ['', ' ', -1, 101, 1000, -1000, 0.5, '0,5', 'abc', '.', '/', '?', ':', '-', '+', '=', '#', '$', '%', '&', ',', '?', '@', '"', ';', '*'];

let index;
for (index = 0; index < arr.length; ++index) {
    let testData = arr[index];
    pm.sendRequest({
        url: 'http://116.203.27.46:5002/age_usa',
        method: 'POST',
        headers: {},
        body: {
            mode: 'formdata',
            formdata: [
                {key: 'age', value: arr[index]}
            ] 
        }   
    }, function(err, res) {
        console.log('Age value: ' + testData);
        pm.test('Age value: ' + testData, function () {
            pm.expect(res).to.have.property('code', 500);
        });
    });
}