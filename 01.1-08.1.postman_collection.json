{
	"info": {
		"_postman_id": "bc97cc91-d0d1-4292-8703-51203a51acc0",
		"name": "Сurrency_collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01_login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/* \r",
							"Необходимо залогиниться. \r",
							"\r",
							"TESTS:\r",
							"1. Приходящий токен необходимо передать во все остальные запросы.\r",
							"\r",
							"REQUEST:\r",
							"Метод: POST\r",
							"URL: http://116.203.27.46:5002/login\r",
							"Body:   Login : string (кроме /)\r",
							"        Password : string\r",
							"\r",
							"RESPONSE:\r",
							"{\r",
							"    \"token\": \"string\"\r",
							"}\r",
							"*/\r",
							"\r",
							"// Извлечение токена из тела ответа и создание переменной окружения\r",
							"\r",
							"pm.test(\"Set token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"token\", jsonData.token);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Booinitski",
							"type": "text"
						},
						{
							"key": "password",
							"value": "12345678",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "02_user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/* \r",
							"TESTS:\r",
							"1. Статус код 200\r",
							"2. Проверка структуры json в ответе.\r",
							"3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"REQUEST:\r",
							"Метод: POST\r",
							"URL: http://116.203.27.46:5002/user_info\r",
							"Body:   age: int\r",
							"        salary: int\r",
							"        name: str\r",
							"        auth_token\r",
							"\r",
							"RESPONSE:\r",
							"{'start_qa_salary':salary,\r",
							" 'qa_salary_after_6_months': salary * 2,\r",
							" 'qa_salary_after_12_months': salary * 2.9,\r",
							" 'person': {'u_name':[user_name, salary, age],\r",
							"                                'u_age':age,\r",
							"                                'u_salary_1.5_year': salary * 4}\r",
							"                                }\r",
							"\r",
							"*/\r",
							"\r",
							"// Проверка на статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверка структуры json в ответе\r",
							"// https://www.liquid-technologies.com/online-json-to-schema-converter\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"person\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"u_age\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                \"u_name\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": [\r",
							"                        {\r",
							"                        \"type\": \"string\"\r",
							"                        },\r",
							"                        {\r",
							"                        \"type\": \"integer\"\r",
							"                        },\r",
							"                        {\r",
							"                        \"type\": \"integer\"\r",
							"                        }\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"            \"u_age\",\r",
							"            \"u_name\",\r",
							"            \"u_salary_1_5_year\"\r",
							"            ]\r",
							"        },\r",
							"        \"qa_salary_after_12_months\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"qa_salary_after_6_months\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"start_qa_salary\": {\r",
							"            \"type\": \"integer\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"    ]\r",
							"};\r",
							"\r",
							"var jsonData = pm.response.json() \r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// Проверка правильности результата перемножения на коэффициент\r",
							"var jsonData = pm.response.json() \r",
							"var startSalary = jsonData.person.u_name[1];\r",
							"\r",
							"pm.test('Multiplication result (salary after 6 months)', function () {\r",
							"    pm.expect(startSalary * 2).to.eql(jsonData.qa_salary_after_6_months);\r",
							"});\r",
							"\r",
							"pm.test('Multiplication result (salary after 12 months)', function () {\r",
							"    pm.expect(startSalary * 2.9).to.eql(jsonData.qa_salary_after_12_months);\r",
							"});\r",
							"\r",
							"pm.test('Multiplication result (salary after 1.5 year)', function () {\r",
							"    pm.expect(startSalary * 4).to.eql(jsonData.person.u_salary_1_5_year);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Booinitski",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "03_new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/* \r",
							"TESTS:\r",
							"1. Статус код 200\r",
							"2. Проверка структуры json в ответе.\r",
							"3. Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http:// (http://188.130.138.105:5001/new_data)116.203.27.46:5002 (http://188.130.138.105:5001/new_data)/get_test_user\r",
							"4. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"5. Проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"\r",
							"REQUEST:\r",
							"Метод: POST\r",
							"URL: http://116.203.27.46:5002/user_info\r",
							"Body:   age: int\r",
							"        salary: int\r",
							"        name: str\r",
							"        auth_token\r",
							"\r",
							"RESPONSE:\r",
							"{'name':name,\r",
							"    'age': int(age),\r",
							"    'salary': [salary, str(salary*2), str(salary*3)]}\r",
							"*/\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": [\r",
							"                {\r",
							"                \"type\": \"integer\"\r",
							"                },\r",
							"                {\r",
							"                \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                \"type\": \"string\"\r",
							"                }\r",
							"            ]\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"// достать значения из поля u_salary_1.5_year и передать в поле salary запроса get_test_user\r",
							"let salary = +(pm.environment.get('salary_1.5_years'))\r",
							"console.log(salary);\r",
							"\r",
							"pm.sendRequest({\r",
							"    method: 'POST',\r",
							"    url: 'http://116.203.27.46:5002/get_test_user',\r",
							"    body: {\r",
							"        mode: 'formdata',\r",
							"        formdata: [\r",
							"            {key: 'salary', value: salary},\r",
							"            {key: 'auth_token', value: pm.environment.get('token')}\r",
							"        ]\r",
							"    }\r",
							"});\r",
							"\r",
							"// Проверка правильности результата перемножения на коэффициент\r",
							"var jsonData = pm.response.json();\r",
							"var startSalary = +pm.request.body.formdata.get('salary');\r",
							"pm.test(\"Multiplication result (x2)\", function () {\r",
							"    pm.expect(startSalary * 2).to.eql(+jsonData.salary[1]);\r",
							"});\r",
							"\r",
							"pm.test(\"Multiplication result (x3)\", function () {\r",
							"    pm.expect(startSalary * 3).to.eql(+jsonData.salary[2]);\r",
							"});\r",
							"\r",
							"// Проверка Salary*2 > Salary*1, Salary*2 > Salary0\r",
							"var salary0 = jsonData.salary[0];\r",
							"var salary1 = +jsonData.salary[1];\r",
							"var salary2 = +jsonData.salary[2];\r",
							"\r",
							"pm.test(\"Salary2 > Salary1\", function () {  \r",
							"    pm.expect(salary1).to.be.below(salary2);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary2 > Salary0\", function () {  \r",
							"    pm.expect(salary0).to.be.below(salary2);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Booinitski",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "04_test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"daily_food\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"daily_sleep\": {\r",
							"            \"type\": \"number\"\r",
							"        },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"    \"age\",\r",
							"    \"daily_food\",\r",
							"    \"daily_sleep\",\r",
							"    \"name\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//Проверка правильности результата перемножения на коэфициент\r",
							"var requestWeight = pm.request.body.formdata.get('weight');\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Checking the correctness of multiplication by daily_food\", function () {\r",
							"    pm.expect(requestWeight * 0.012).to.eql(jsonData.daily_food);\r",
							"});\r",
							"\r",
							"pm.test(\"Checking the correctness of multiplication by daily_sleep\", function () {\r",
							"    pm.expect(requestWeight * 2.5).to.eql(jsonData.daily_sleep);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "100",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Booinitski",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "05_get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"age\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"family\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"children\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": [\r",
							"                        {\r",
							"                        \"type\": \"array\",\r",
							"                        \"items\": [\r",
							"                            {\r",
							"                            \"type\": \"string\"\r",
							"                            },\r",
							"                            {\r",
							"                            \"type\": \"integer\"\r",
							"                            }\r",
							"                        ]\r",
							"                        },\r",
							"                    {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": [\r",
							"                        {\r",
							"                        \"type\": \"string\"\r",
							"                        },\r",
							"                        {\r",
							"                        \"type\": \"integer\"\r",
							"                        }\r",
							"                    ]\r",
							"                    }\r",
							"                    ]\r",
							"                },\r",
							"                \"u_salary_1_5_year\": {\r",
							"                    \"type\": \"integer\"\r",
							"                }\r",
							"    },\r",
							"    \"required\": [\r",
							"    \"children\",\r",
							"    \"u_salary_1_5_year\"\r",
							"    ]\r",
							"    },\r",
							"        \"name\": {\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"salary\": {\r",
							"            \"type\": \"integer\"\r",
							"        }\r",
							"    },\r",
							"\r",
							"\"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"]\r",
							"}\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test('Schema is valid', function () {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});\r",
							"\r",
							"//Проверка name response = name environment\r",
							"var jsonData = pm.response.json();\r",
							"pm.test(\"Name response = name environment\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"name\"));\r",
							"});\r",
							"\r",
							"\r",
							"//Проверка, что значение поля age в ответе соответствует отправленному в запросе значению поля age\r",
							"var jsonData = pm.response.json();\r",
							"var ageFormData = +pm.request.body.formdata.get('age');\r",
							"pm.test(\"Request Age = Response Age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(ageFormData);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Booinitski",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "06_currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"function randomID() {\r",
							"    return Math.floor(Math.random() * jsonData.length);\r",
							"};\r",
							"\r",
							"var randCurrencyObject = jsonData[randomID()];\r",
							"var randCurrencyArray = Object.values(randCurrencyObject);\r",
							"\r",
							"pm.environment.set(\"Cur_ID\", +randCurrencyArray[1]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "07_curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var schema = {\r",
							"    'type': 'object',\r",
							"    'properties': {\r",
							"        'Cur_Abbreviation': {\r",
							"            'type': 'string'\r",
							"        },\r",
							"        'Cur_ID': {\r",
							"            'type': 'integer'\r",
							"        },\r",
							"        'Cur_Name': {\r",
							"            'type': 'string'\r",
							"        },\r",
							"        'Cur_OfficialRate': {\r",
							"            'type': 'number'\r",
							"        },\r",
							"        'Cur_Scale': {\r",
							"            'type': 'integer'\r",
							"        },\r",
							"        'Date': {\r",
							"            'type': 'string'\r",
							"        }\r",
							"    },\r",
							"    'required': [\r",
							"        'Cur_Abbreviation',\r",
							"        'Cur_ID',\r",
							"        'Cur_Name',\r",
							"        'Cur_OfficialRate',\r",
							"        'Cur_Scale',\r",
							"        'Date'\r",
							"    ]\r",
							"};\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"pm.test('Schema is valid', function() {\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "08_currency_***",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"let arr = jsonData;\r",
							"\r",
							"for ( let i = 0; i < arr.length; i++ ) { \r",
							"    \r",
							"    let currencyObj = arr[i];\r",
							"    let currencyArr = Object.values(currencyObj);\r",
							"    let currencyID = currencyArr[1];\r",
							"    \r",
							"        pm.sendRequest({\r",
							"            url: 'http://116.203.27.46:5002/curr_byn',\r",
							"            method: 'POST',\r",
							"            headers: {},\r",
							"            body: {\r",
							"                mode: 'formdata',\r",
							"                formdata: [\r",
							"                    {key: 'auth_token', value: pm.environment.get(\"token\")},\r",
							"                    {key: 'curr_code', value: currencyID}\r",
							"                ] \r",
							"            }\r",
							"\r",
							"        }, function(err, res) {\r",
							"            let statusCode = Object.values(res)[3];\r",
							"            if (statusCode === 200) {\r",
							"                let resultCurrency = res.json();\r",
							"                if ('undefined' !== typeof resultCurrency.Cur_OfficialRate) {\r",
							"                    console.log(resultCurrency);\r",
							"                }       \r",
							"            } \r",
							"        }); \r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		}
	]
}